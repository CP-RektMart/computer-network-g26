// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                 @id @default(autoincrement())
  username                 String              @unique
  email                    String              @unique
  password                 String         
  salt                     String

  registeredAt             DateTime            @default(now())
  lastLoginAt                DateTime            @default(now())
  isOnline                 Boolean             @default(false)

  roomParticipant  RoomParticipant[]  
  messages     Message[]

  @@index([id, username, email])
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String   @default("")
  password                 String     @default("")   
  salt                     String     @default("")
  havePassword      Boolean           @default(false)

  room        Room     @relation(fields: [id], references: [id], onDelete: Cascade)

  @@index([id])
}

model Room {
  id      String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  lastSentAt  DateTime?      
  type        String

  group       Group?
  participants     RoomParticipant[]
  messages    Message[]
}

model RoomParticipant {
  userId     Int
  roomId     String
  role       String     @default("member") // 'admin', 'moderator', 'member'

  user       User       @relation(fields: [userId], references: [id])
  room       Room       @relation(fields: [roomId], references: [id])

  joinedAt   DateTime   @default(now())
  lastSeemAt  DateTime? 
  isLeaved    Boolean   @default(false)

  @@id([userId, roomId])
  @@index([userId, roomId])
}

model Message {
  id       String @id  @default(cuid())
  senderType String   // system | user
  senderId  Int?   
  roomId   String
  content  Json
  sentAt   DateTime  @default(now())
  isEdited  Boolean   @default(false)

  user     User?      @relation(fields: [senderId], references: [id])
  room     Room      @relation(fields: [roomId], references: [id])

  @@index([roomId, sentAt]) 
}
