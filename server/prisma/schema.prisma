// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                 @id @default(autoincrement())
  username                 String              @unique
  email                    String              @unique
  password                 String         
  salt                     String
  avatar                   String              @default("")

  groupMessages            GroupMessage[]  
  groupMemberships         GroupMember[]

  createdAt                DateTime            @default(now())
  lastSeenAt               DateTime            @default(now())
  isOnline                 Boolean             @default(false)

  directMessagesSent       DirectMessage[]     @relation("Sender")
  directMessagesReceived   DirectMessage[]     @relation("Receiver")

  DirectConversationSent DirectConversation[] @relation("Receiver")
  DirectConversationReceived DirectConversation[] @relation("Sender")

  @@index([id, username, email])
}

model Group {
  id        Int          @id @default(autoincrement())
  name      String
  description String    @default("")
  avatar    String      @default("")

  members   GroupMember[]
  messages  GroupMessage[]

  createdAt DateTime     @default(now())
  lastSendAt DateTime    @default(now())

  @@index([id, name])
}

model GroupMember {
  userId  Int
  groupId Int
  role    String  @default("member") // 'admin', 'moderator', 'member'

  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  joinedAt DateTime @default(now())
  lastSeemAt DateTime @default(now())

  @@id([userId, groupId])
  @@index([userId, groupId])
}

model GroupMessage {
  userId    Int
  groupId   Int
  content   Json
  sentAt    DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id])
  group     Group  @relation(fields: [groupId], references: [id])

  @@index([groupId, sentAt, userId]) 
  @@id([groupId, sentAt, userId])
}

model DirectConversation {
  id           String      @id @default(uuid()) 
  senderId     Int         
  receiverId   Int         
  createdAt    DateTime    @default(now())    

  sender       User        @relation("Sender", fields: [senderId], references: [id]) 
  receiver     User        @relation("Receiver", fields: [receiverId], references: [id])

  messages     DirectMessage[] 

  @@unique([senderId, receiverId]) 
}

model DirectMessage {
  id          String    
  senderId    Int
  receiverId  Int
  content     Json
  sentAt      DateTime   @default(now())
  conversationId String

  sender      User       @relation("Sender", fields: [senderId], references: [id])
  receiver    User       @relation("Receiver", fields: [receiverId], references: [id])
  conversation DirectConversation @relation(fields: [conversationId], references: [id])

  @@index([senderId, sentAt, receiverId])  
  @@id ([senderId, sentAt, receiverId])
}


